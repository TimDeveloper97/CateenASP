@using Model
@{
    ViewData["Title"] = "Home Page";
    var listOrder = (List<Order>)ViewBag.Orders;
    var flag = ViewData["Flag"];
}

@model List<Model.Food>


<div class="container-fluid banner">
    <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
        <ol class="carousel-indicators">
            <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
            <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
            <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
        </ol>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img class="d-block w-100" src="/assets/—Pngtree—board food lunch food_917623.jpg" alt="First slide">
            </div>
            <div class="carousel-item">
                <img class="d-block w-100" src="/assets/—Pngtree—bread ketchup butter flour chopping_1103257.jpg" alt="Second slide">
            </div>
            <div class="carousel-item">
                <img class="d-block w-100" src="/assets/—Pngtree—board food lunch food_917623.jpg" alt="Third slide">
            </div>
        </div>
        <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
</div>

<div class="container">






    @if (ViewData["Message"] != null)
    {
        @*<div id="msgAlert" class="alert alert-danger" role="alert">
            @ViewData["Message"]
            </div>*@
        <!-- Modal -->
        <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="false">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLongTitle">Notification</h5>

                    </div>
                    <div class="modal-body">
                        @ViewData["Message"]
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="closeModal" onclick="closeModal()" data-dismiss="modal">Close</button>

                    </div>
                </div>
            </div>
        </div>
    }




    <!--Template breakfast-->
    @*<h2>@ViewBag.Meal</h2>*@
    <div class="carousel-container">
        <div class="carousel-inner">
            <div class="track">
                @foreach (var item in Model)
                {


                    <div class="card-container">
                        <div class="card">
                            <div class="img"><a asp-action="Details" asp-route-id="@item.Id"><img src="/assets/@item.Image"></a></div>
                            <div class="info">
                                <h4><a asp-action="Details" asp-route-id="@item.Id">@item.Name</a></h4>
                                <h6>Món phụ: @item.SideDishes</h6>
                                <div>
                                    <span style="color: red;">@item.Price VNĐ</span>
                                </div>
                            </div>
                            <p>
                                <a class="order-button" asp-action="Order" asp-route-id="@item.Id">Order</a>
                            </p>
                        </div>

                    </div>

                }


            </div>
        </div>
        <div class="nav">
            <button class="prev">
                <i class="material-icons">
                    keyboard_arrow_left
                </i>
            </button>
            <button class="next">
                <i class="material-icons">
                    keyboard_arrow_right
                </i>
            </button>
        </div>
    </div>


</div>

@section Scripts{
<script>

    const prev  = document.querySelector('.prev');
    const next = document.querySelector('.next');
    //
    const prev1  = document.querySelector('.prev1');
    const next1 = document.querySelector('.next1');
    //
    const prev2  = document.querySelector('.prev2');
    const next2 = document.querySelector('.next2');
    //
    const track = document.querySelector('.track');
    const track1 = document.querySelector('.track1');
    const track2 = document.querySelector('.track2');

    let carouselWidth = document.querySelector('.carousel-container').offsetWidth;

    window.addEventListener('resize', () => {
      carouselWidth = document.querySelector('.carousel-container').offsetWidth;
    })
    //track
    let index = 0;

    next.addEventListener('click', () => {
      index++;
      prev.classList.add('show');
      track.style.transform = `translateX(-${index * carouselWidth}px)`;

      if (track.offsetWidth - (index * carouselWidth) < carouselWidth) {
        next.classList.add('hide');
      }
    });

    prev.addEventListener('click', () => {
      index--;
      next.classList.remove('hide');
      if (index === 0) {
        prev.classList.remove('show');
      }
      track.style.transform = `translateX(-${index * carouselWidth}px)`;
    });
    //
    //track1
    let index1 = 0;

    next1.addEventListener('click', () => {
      index1++;
      prev1.classList.add('show');
      track1.style.transform = `translateX(-${index1 * carouselWidth}px)`;

      if (track1.offsetWidth - (index1 * carouselWidth) < carouselWidth) {
        next1.classList.add('hide');
      }
    });

    prev1.addEventListener('click', () => {
      index1--;
      next1.classList.remove('hide');
      if (index1 === 0) {
        prev1.classList.remove('show');
      }
      track1.style.transform = `translateX(-${index1 * carouselWidth}px)`;
    });
    //
    //track2
    let index2 = 0;

    next2.addEventListener('click', () => {
      index2++;
      prev2.classList.add('show');
      track2.style.transform = `translateX(-${index2 * carouselWidth}px)`;

      if (track2.offsetWidth - (index2 * carouselWidth) < carouselWidth) {
        next2.classList.add('hide');
      }
    });

    prev2.addEventListener('click', () => {
      index2--;
      next2.classList.remove('hide');
      if (index2 === 0) {
        prev.classList.remove('show');
      }
      track2.style.transform = `translateX(-${index2 * carouselWidth}px)`;
    });
    //
    setTimeout(function () {
            $("#msgAlert").fadeOut('slow');
        }, 2000);
     //

     var modal = document.getElementById('myModal');
     modal.style.display = "unset";
     modal.style.opacity = "unset";

     function closeModal(){
         modal.style.zIndex = "unset";
         modal.style.display = "none";
         modal.style.opacity = "0";
     }
</script>
}